provider "aws" {
  region = "ap-south-1"
}

resource "aws_rds_cluster" "aurora_postgres" {
  engine         = "aurora-postgresql"
  engine_version = "13.4"
  cluster_identifier = "aurora-postgres-cluster"
  master_username = "postgres"
  master_password = "examplepassword"
  database_name   = "mydb"
  skip_final_snapshot = true
  backup_retention_period = 5
}

resource "aws_rds_cluster_instance" "aurora_postgres_instance" {
  count              = 2
  identifier         = "aurora-postgres-instance-${count.index + 1}"
  cluster_identifier = aws_rds_cluster.aurora_postgres.id
  instance_class     = "db.r5.large"
  engine             = aws_rds_cluster.aurora_postgres.engine
}

resource "aws_iam_role" "aurora_proxy_role" {
  name = "aurora-proxy-role"

  assume_role_policy = jsonencode({
    "Version": "2012-10-17",
    "Statement": [{
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": "rds.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_policy" "aurora_proxy_policy" {
  name = "aurora-proxy-policy"

  policy = jsonencode({
    "Version": "2012-10-17",
    "Statement": [
      {
        "Action": "rds-db:connect",
        "Effect": "Allow",
        "Resource": "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "aurora_proxy_attach_policy" {
  role       = aws_iam_role.aurora_proxy_role.name
  policy_arn = aws_iam_policy.aurora_proxy_policy.arn
}

resource "aws_db_proxy" "aurora_proxy" {
  name                  = "aurora-postgres-proxy"
  engine_family         = "POSTGRESQL"
  role_arn              = aws_iam_role.aurora_proxy_role.arn
  vpc_security_group_ids = [aws_security_group.db_security_group.id]
  vpc_subnet_ids        = aws_subnet.my_vpc_subnets[*].id

  idle_client_timeout = 1800
  require_tls         = true
}

resource "aws_db_proxy_target_group" "aurora_proxy_tg" {
  db_proxy_name   = aws_db_proxy.aurora_proxy.name
  name            = "aurora-postgres-proxy-tg"
  connection_pool_config {
    max_connections_percent         = 100
    max_idle_connections_percent    = 50
    connection_borrow_timeout       = 120
    session_pinning_filters         = []
  }
  db_instance_identifiers = aws_rds_cluster_instance.aurora_postgres_instance[*].id
}

resource "aws_security_group" "db_security_group" {
  name        = "aurora-proxy-sg"
  description = "Allow inbound PostgreSQL access"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 5432
    to_port     = 5432
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_secretsmanager_secret" "db_password" {
  name = "db-proxy-secret"
}

resource "aws_secretsmanager_secret_version" "db_password_version" {
  secret_id     = aws_secretsmanager_secret.db_password.id
  secret_string = jsonencode({
    username = "postgres"
    password = "postgresql1234"
  })
}

resource "aws_db_proxy" "aurora_proxy" {
  name                   = "aurora-postgres-proxy"
  engine_family          = "POSTGRESQL"
  role_arn               = aws_iam_role.aurora_proxy_role.arn
  vpc_security_group_ids = [aws_security_group.db_security_group.id]
  vpc_subnet_ids         = aws_subnet.my_vpc_subnets[*].id

  auth {
    secret_arn = aws_secretsmanager_secret.db_password.arn
    iam_auth   = "DISABLED"
  }

  idle_client_timeout = 1800
  require_tls         = true
}

